import sagex

# URLS
# stvphoenix://airing/ID
# stvphoenix://mediafile/ID
RE_VIDEO_URL = Regex('stvphoenix://([^/]+)/([0-9]+)')

def MetadataObjectForURL(inurl):
    Log("Phoenix: MetadataObjectForURL: " + inurl)

    regx = RE_VIDEO_URL.search(inurl)

    if 'airing' == regx.group(1):
        return MetadataForAiring(regx.group(2))
    else:
        return MetadataForMediaFile(regx.group(2))


def MetadataForAiring(airing):
    Log("MetadataForAiring(): Airing: " + airing)
    file = sagex.SageAPI('GetAiringForID', [airing])

    if file is None:
        return ObjectContainer(message='No Airing for ' + airing, header='No Airing');


    o = EpisodeObject()
    o.title = sagex.jsonval(file,  'Airing.Show.ShowEpisode')
    o.show = sagex.jsonval(file, 'Airing.Show.ShowTitle')
    o.season = int(sagex.jsonval(file, 'Airing.Show.ShowSeasonNumber'))
    o.index = int(sagex.jsonval(file, 'Airing.Show.ShowEpisodeNumber'))
    o.summary = sagex.jsonval(file, "Airing.Show.ShowDescription")
    o.duration = sagex.jsonval(file, "Airing.ScheduleDuration")
    o.originally_available_at = Datetime.FromTimestamp((sagex.jsonval(file, "Airing.ScheduleStartTime")) / 1000)
    o.thumb = sagex.GetFanartFor(mediafile=None, artifact='poster', mediatype='tv', title=o.show, season=o.season)
    o.art = sagex.GetFanartFor(mediafile=None, artifact='background', mediatype='tv', title=o.show, season=o.season)
    o.guest_stars = sagex.jsonval(file, "Airing.Show.PeopleAndCharacterListInShow")

    return o


def MetadataForMediaFile(mediafile):
    Log("MetadataForMediaFile(): MediaFile: " + mediafile)

    # Request the URL
    file = sagex.SageAPI('GetMediaFileForID', [mediafile])

    if file == None:
        Log('MetadataForMediaFile did not return a json reply for ' + mediafile);

    if 'MediaFile' not in file:
        Log(file)
        return MetadataForAiring(mediafile)

    # Log(md)
    isTV = IsTV(file)

    if isTV:
        o = EpisodeObject()
    else:
        o = VideoClipObject()

    md = sagex.jsonval(file, 'MediaFile.MediaFileMetadataProperties')

    if isTV:
        o.title = sagex.jsonval(md, 'EpisodeName')
        o.show = sagex.jsonval(file, 'MediaFile.MediaTitle')
        o.season = int(sagex.jsonval(md,'SeasonNumber'))
        o.index = int(sagex.jsonval(md,'EpisodeNumber'))
        o.guest_stars = sagex.RoleList(sagex.jsonval(file,"MediaFile.Airing.Show"), 'Actor')
    else:
        o.title = sagex.jsonval(file,'MediaFile.MediaTitle')
        o.year = int(sagex.jsonval(md, 'Year', defval='0'))
        if o.year > 0 and o.title is not None:
            o.title = o.title + "(" + str(o.year) + ")"

    o.directors = sagex.RoleList(sagex.jsonval(file, "MediaFile.Airing.Show"), 'Director')
    o.writers = sagex.RoleList(sagex.jsonval(file, "MediaFile.Airing.Show"), 'Writer')
    o.producers = sagex.RoleList(sagex.jsonval(file, "MediaFile.Airing.Show"), 'Producer')

#    try:
#        o.content_rating =

    o.summary = sagex.jsonval(md,'Description')
    o.duration = sagex.jsonval(file, "MediaFile.Airing.ScheduleDuration")

    try:
        o.rating = int(sagex.jsonval(md,'UserRating'), 0) / 10
    except:
        pass

    try:
        o.originally_available_at = Datetime.FromTimestamp((sagex.jsonval(file, "MediaFile.Airing.ScheduleStartTime")) / 1000)
    except:
        pass

    o.thumb = sagex.GetThumb(mediafile)
    o.art = sagex.GetBackground(mediafile)
    return o


def MediaObjectsForURL(url):
    Log("Phoenix: MediaObjectsForURL: " + url)
    return [
        MediaObject(
            container='mp2ts',
            optimized_for_streaming=True,
            # video_codec=VideoCodec.H264,
            # audio_codec=AudioCodec.MP3,
            # container=Container.MP4,
            parts=[PartObject(key=Callback(PlayVideo, url=url))]
        )
    ]


def PlayVideo(url):
    Log("Phoenix: PlayVideo(): " + url)
    regx = RE_VIDEO_URL.search(url);
    # video_url = SAGEX_URL() + "/media/mediafile/" + regx.group(2) + "/" + regx.group(2) + ".debug.m3u8?segment=10"
    video_url = sagex.SAGEX_URL() + "/media/mediafile/" + regx.group(2) + "?_debug=true"
    Log("Phoenix: PlayVideo(): Real Url: " + video_url)
    return Redirect(video_url)


def IsTV(md):
    return 'TV' == sagex.jsonval(md, 'MediaFile.MediaFileMetadataProperties.MediaType') or sagex.jsonval(md, 'MediaFile.IsTVFile') is True


