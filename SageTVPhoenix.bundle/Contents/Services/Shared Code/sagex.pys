import base64
import urllib


def SAGEX_URL():
    return "http://%s:%s/sagex" % (Prefs['server'], Prefs['port'])

# given 'object.child' it will traverse the object hierarchy for the item
def jsonval(o, expr, defval=None):
    if (o == None):
        Log('Passed Null Object for ' + expr);
        return defval

    parts = expr.split(".")
    for s in parts:
        if (s in o):
            o = o[s]
        else:
            Log("val(): Object doesn't have " + expr + "; (failed on " + s + ")")
            o = defval
            break

    return o


def GetThumb(mediafile):
    return GetFanart(mediafile, 'poster', '600')

def GetBackground(mediafile):
    return GetFanart(mediafile, 'background')

def GetFanart(mediafile, artifact, scalex=None):
    if isinstance(mediafile, dict):
        fid = mediafile['id']
    else:
        fid = mediafile

    values = {}
    values['tag'] = 'plexphoenix'
    values['mediafile'] = fid

    if not scalex == None:
        values['scalex'] = scalex

    url = SAGEX_URL() + "/media/"+artifact+"?" + urllib.urlencode(values)
    return url

def GetFanartFor(mediafile, mediatype, artifact, title=None, season=None, scalex=None):
    values = {}
    if isinstance(mediafile, dict):
        if title is None and 'title' in mediafile:
            title = mediafile['title']

        if season is None and 'season' in mediafile:
            season = mediafile['season']

        if not 'isEPG' in mediafile:
            values['mediafile'] = mediafile['id']
    else:
        if mediafile is not None:
            values['mediafile'] = mediafile

    values['tag'] = 'plexphoenix'
    values['usedefault'] = 'true'
    values['title'] = title
    values['defaulttitle'] = title
    values['artifact'] = artifact
    values['mediatype'] = mediatype

    if not scalex == None:
        values['scalex'] = scalex

    url = SAGEX_URL() + "/media/fanart?" + urllib.urlencode(values)

    Log("FANART URL: " + url)

    return url


def SageAPI(cmd, args):
    # add in command args
    values = {}
    values['c'] = cmd
    values['encoder'] = 'json'
    if not args == None:
        i = 1
        for arg in args:
            values[str(i)] = arg
            i += 1

    # Request the URL with authentication
    headers = {}
    headers["Authorization"] = "Basic " + (base64.encodestring(Prefs['username'] + ":" + Prefs['password']))

    url = SAGEX_URL() + "/api?" + urllib.urlencode(values)

    try:
        reply = JSON.ObjectFromURL(url=url, headers=headers)
    except Exception as e:
        Log('Failed while calling SageAPI ' + url);
        Log(str(e))

    if 'Result' in reply:
        return reply['Result']
    else:
        return reply


def PhoenixAPI(cmd, args=None, start=0, end=-1):
    # add in command args
    values = {}
    values['c'] = cmd
    if start is not 0:
        values['start']=start
    if end > 0:
        values['end']=end

    if not args is None:
        i = 1
        for arg in args:
            values[str(i)] = arg
            i += 1

    # Request the URL with authentication
    headers = {}
    headers["Authorization"] = "Basic " + (base64.encodestring(Prefs['username'] + ":" + Prefs['password']))

    url = SAGEX_URL() + "/phoenix?" + urllib.urlencode(values)
    try:
        reply = JSON.ObjectFromURL(url=url, headers=headers)
    except Exception as e:
        Log('Failed to Call JSON URL: ' + url)
        Log(str(e))

    if 'reply' in reply:
        return reply['reply']
    else:
        return reply


## VFS Specific APIS
def FindSageID(json):
    if 'children' in json:
        return FindSageIDInChildren(json['children'])
    else:
        if 'id' in json:
            return json['id']
        else:
            return None

def FindSageIDInChildren(children):
    for child in children:
        sid = FindSageID(child)
        if not sid is None:
            return sid

    return None


def FindFirstChild(json):
    if isinstance(json, dict):
        if 'children' in json:
            return FindFirstChild(json['children'])
        else:
            return json
    elif isinstance(json, list):
        return FindFirstChild(json[0])
    else:
        return json


    return None


def IsAirings(json):
    try:
        return FindFirstChild(json)['isEPG']
    except:
        return False


def AppendPath(path, part):
    if path == '':
        return part
    else:
        return path + "^^" + part


def GetPath(json, path):
    Log("GetPath: " + path)
    if path == '' or path == jsonval(json, 'title'):
        return json

    for s in path.split('^^'):
        Log("PATH PART: " + s)
        if s == '':
            continue

        Log("Looking for " + s)
        for video in json['children']:
            if s == jsonval(video,'title'):
                Log("Getting: " + jsonval(video, 'title'))
                json = video
                continue

    return json


# Misc Util Sages Methods
def GetStreamUrl(media):
    return "stvphoenix://mediafile/" + media['id']


def GetAiringUrl(media):
    return "stvphoenix://airing/" + media['id']


def PhoenixObject(media):
    if IsAirings(media):
        return PhoenixAiringObject(media)
    else:
        return PhoenixMediaObject(media)


def PhoenixAiringObject(media):
    o = EpisodeObject()
    aired = Datetime.FromTimestamp((jsonval(media, "airingTime")) / 1000)
    o.title = jsonval(media, 'title') + " - " + jsonval(media, 'episodeName') + " - " + aired.strftime("%a %I:%M %p")
    o.show = jsonval(media, 'title')
    o.season = jsonval(media, 'season')
    o.index = jsonval(media, 'episode')
    desc = aired.strftime("%a, %b %d at %I:%M %p\n") + jsonval(media, 'description')
    o.summary = desc
    o.duration = jsonval(media, "runtime")
    o.originally_available_at = aired
    o.thumb = GetFanartFor(mediafile=media, artifact='poster', mediatype='tv')
    o.url = GetAiringUrl(media)
    return o


def PhoenixMediaObject(media):
    if 'isTV' in media:
        isTV = media['isTV']
    else:
        isTV = False

    if isTV:
        o = EpisodeObject()
        o.title = jsonval(media,'episodeName')
        o.show = jsonval(media,'title')
        o.season = jsonval(media,'season')
        o.index = jsonval(media,'episode')
        if o.season > 0:
            o.title = ("%s (%sx%s)" % (jsonval(media, 'episodeName'), str(o.season), str(o.index)))
        o.summary = jsonval(media,'description')
    else:
        o = VideoClipObject()
        o.title = jsonval(media, 'title')
        o.summary = jsonval(media,'description')
        o.year = jsonval(media, 'year')
        if o.year > 0:
            o.title = "%s (%s)" % (jsonval(media, 'title'), str(o.year))

    if o.title is None:
        Log(media)

    o.url = GetStreamUrl(media)
    o.thumb = GetThumb(media)
    o.duration = jsonval(media, "runtime")

    try:
        o.originally_available_at = Datetime.FromTimestamp((jsonval(media, "airingTime")) / 1000)
    except:
        pass

    return o

def RoleList(json, role='Actor'):
    people = jsonval(json, "PeopleListInShow")
    roles = jsonval(json, "RolesInShow")

    if people is None:
        return []

    retRoles = []
    n = len(people)
    for x in range(0, n):
        if roles[x] == role:
            retRoles.append(people[x])

    return retRoles